#  Key improvements you can apply
#  - Reduce duplication with YAML anchors: DRY the Loki services (read/write/backend) and shared healthchecks/volumes.
#  - Avoid exposing internal ports: 7946 and 9095 are for intra-cluster; use expose instead of host-mapped ports.
#  - Use depends_on with health conditions: Start services only after dependencies are healthy.
#  - Mount configuration read-only: Prevent accidental in-container edits.
#  - Add restart policies: e.g., restart: unless-stopped for resiliency.
#  - Prefer bind-mounted config files over heredoc: Simpler and less error-prone for nginx.
#  - Consider single-binary Loki for local/dev: -target=all is much simpler unless youâ€™re testing scalability.
#  - Make observability optional via profiles: Start it only when needed (docker compose --profile observability up).
#  - Pin images or at least major.minor tags: Reduce surprises from patch changes.
#  - Security tightening: read_only root FS, drop capabilities, non-root users where supported (Grafana, Prometheus, NGINX).
#  - Normalize healthchecks: Use curl (alpine/busybox-friendly) consistently and shorter timeouts.
#
#  Option A (recommended for local/dev): Single-binary Loki behind NGINX This collapses read/write/backend to a single Loki instance for simplicity while keeping your gateway, Grafana, Tempo, Prometheus, MinIO, and Alloy.



  # Observability stack can be toggled with: --profile observability
x-health-curl: &health-curl
  interval: 10s
  timeout: 5s
  retries: 5

services:
  loki:
    image: grafana/loki:3.0.0
    command: -config.file=/etc/loki/config.yaml -target=all -legacy-read-mode=false
    profiles: ["observability"]
    ports:
      - "3101:3100"   # optional direct access; gateway will proxy on 3100
    expose:
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3100/ready"]
      <<: *health-curl
    depends_on:
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - eazybank

  gateway:
    image: nginx:1.25.5
    profiles: ["observability"]
    depends_on:
      loki:
        condition: service_healthy
    volumes:
      - ../observability/gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      <<: *health-curl
    restart: unless-stopped
    networks:
      - eazybank

  alloy:
    image: grafana/alloy:v1.0.0
    profiles: ["observability"]
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    depends_on:
      gateway:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - eazybank

  minio:
    image: minio/minio:RELEASE.2024-05-27T19-17-46Z
    profiles: ["observability"]
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 20s
      retries: 5
    restart: unless-stopped
    networks:
      - eazybank

  prometheus:
    image: prom/prometheus:v2.50.1
    profiles: ["observability"]
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    networks:
      - eazybank

  tempo:
    image: grafana/tempo:2.4.2
    profiles: ["observability"]
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml:ro
    restart: unless-stopped
    networks:
      - eazybank

  grafana:
    image: grafana/grafana:11.0.0
    profiles: ["observability"]
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      gateway:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      <<: *health-curl
    restart: unless-stopped
    networks:
      - eazybank

networks:
  eazybank:
    driver: bridge

volumes:
  minio-data:
    driver: local